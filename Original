"""
Elevator simlation.
User can input data variables for the ammount of people, floor range and
elevator capactity. The user can also select the data distribution.
The base case is a mechanical simlutaion where the elevator can only change
direction once at the top floor or bottom floor.
The improved system can use multiple functions to reduce this uncessary movement
Simlation is generated in a gui
Large floor range will not show outside bounds, but will still run and produce
data
"""
from tkinter import *
import random
import time
import numpy as np

class People(object):
    def __init__(self, ID, floor_num_count, dist, curr_floor=0, destination_floor=0):
        """
        Initalised variables to generate person as object
        """
        self.identity = ID
        self.floors_moved = 0
        self.waiting_time = 0
        self.direction_togo = ""
        self.floors_count = floor_num_count
        self.dist = dist
        #####
        if self.dist == "Random": #Random uniform floors for object
            curr_floor = random.randint(0, self.floors_count)
            self.on_floor = curr_floor
            #####
            destination_floor = random.randint(0, self.floors_count)
            #####
            while destination_floor == curr_floor:
                destination_floor = random.randint(0, self.floors_count)
            #####
            self.going_floor = destination_floor

        elif self.dist == "Normal":#Normal distribution
            curr_floor = random.randint(0, self.floors_count)
            if curr_floor == self.floors_count/2:
                self.on_floor = curr_floor
            elif curr_floor > self.floors_count/2:
                curr_floor -= random.randint(0, (int(self.floors_count/3)))

            elif curr_floor < self.floors_count/2:
                curr_floor += random.randint(0, (int(self.floors_count/3)))

            self.on_floor = curr_floor

            #####
            destination_floor = random.randint(0, self.floors_count)
            #####
            while destination_floor == curr_floor:
                destination_floor = random.randint(0, self.floors_count)
            #####
            self.going_floor = destination_floor

        elif self.dist == "Exponetial(UP)":#Object starting floors will be higher than the mid floor, destination floor is lower
            curr_floor = random.randint(int(self.floors_count/2), self.floors_count)
            self.on_floor = curr_floor
            #####
            destination_floor = random.randint(0, int(self.floors_count/2))
            #####
            while destination_floor == curr_floor:
                destination_floor = random.randint(0, int(self.floors_count/2))
            #####
            self.going_floor = destination_floor

        elif self.dist == "Exponetial(DOWN)":#Object starting floors will be lower than the mid floor, destination floor is higher
            curr_floor = random.randint(0, int(self.floors_count/2))
            self.on_floor = curr_floor
            #####
            destination_floor = random.randint(int(self.floors_count/2), self.floors_count)
            #####
            while destination_floor == curr_floor:
                destination_floor = random.randint(int(self.floors_count/2), self.floors_count)
            #####
            self.going_floor = destination_floor
        ##
        if self.on_floor > self.going_floor:
            self.distance_to_travel = self.on_floor - self.going_floor
            self.direction_togo = "DOWN"
        elif self.on_floor < self.going_floor:
            self.distance_to_travel = self.going_floor - self.on_floor
            self.direction_togo = "UP"

        self.fill = "#" + ("%06x"%random.randint(50000, 1000000))#colourfill for objcet

class Elevator(object):
    def __init__(self, data_set_init, frame, curr_floor=-1):
        """
        Initalised Elevator variables
        """
        self.people_lst = data_set_init.cust_list
        self.people_count = data_set_init.people_count_int
        self.floor = data_set_init.floor_count_int
        self.current_floor = curr_floor
        self.direction = "UP"
        self.complete = []
        self.lift_list = []
        self.cur_amm_in_ele = 0
        self.total_floors_moved = 0
        self.max_in = data_set_init.elevator_amm_cap
        self.average_cost = 0
        self.average_wait = 0

    def move(self, lim_upper, lim_lower):
        """
        Sets the elevator movement direction
        """
        if self.current_floor < 0:
           self.direction = "UP"

        if self.current_floor > self.floor:
           self.direction = "DOWN"

        if self.current_floor > lim_upper:
            self.direction = "DOWN"
        if self.current_floor < lim_lower:
            self.direction = "UP"
        ELE.up_dw()
        frame.label_total_count(self.total_floors_moved)

    def up_dw(self):
        """
        Calls frame to move the elevator
        """
        if self.direction == "UP":
            self.current_floor += 1
            frame.moveup()
        #////////////////######//////####
        elif self.direction == "DOWN":
            self.current_floor -= 1
            frame.movedown()
        #////////////////######//////####

    def add_to_ele(self, person):
        """
        Add person to the elevator lift list
        (capactity is incremented by one)
        """
        self.lift_list.append(person)
        self.cur_amm_in_ele += 1

    def leave_ele(self, person):
        """
        Removes person from elevator lift list
        Adds the perosn to the complete list
        (capactity is decreased by one)
        """
        self.lift_list.remove(person)
        self.average_cost += person.floors_moved
        self.cur_amm_in_ele -= 1
        self.complete.append(person.identity)

    def cost(self):
        """
        All people in elevator, floors moved untill destination is added for
        each person
        """
        for person in self.lift_list:
            person.floors_moved += 1
        ELE.total_floors_moved += 1

    def done(self):
        """
        Runtime is finsished
        """
        print("Finished")

class Building():
    def __init__(self, data_for_logic, ELE, frame):
        """
        Inistalise the building variables for logic and runtime functions
        """
        self.people_c = data_for_logic.people_count_int
        self.floors = data_for_logic.floor_count_int
        self.list = data_for_logic.cust_list
        self.priority_lr = data_for_logic.flr_list
        self.try_list = []
        self.up_list = []
        self.down_list = []
        self.end_list = []
        self.list_set = []
        self.lim_upper = self.floors
        self.lim_lower = 0
        self.target = 0

        Building.sort_agorithum(self)
        if data_for_logic.algorithum == 1:
            Building.run_none(self)
        else:
            Building.run(self)

    def sort_agorithum(self):
        """
        Addes data to new list: No object data is removed from wrong list
        """
        for item in self.list:
            self.try_list.append(item)
        Building.sort_and_set(self)

    def sort_and_set(self):
        """
        Finds the floor with the most people waiting_time
        Will return list with the order of the floors having the most people
        """
        self.floors_fl_al = []
        self.new_pr = []
        for item in self.priority_lr:
            self.floors_fl_al.append(item)

        for k in range(0, len(self.priority_lr)):
            max_set = 0
            curr_floor_c = 0
            item_set = 0
            for items in self.floors_fl_al:
                if items.people_floor_count >= curr_floor_c:
                    curr_floor_c = items.people_floor_count
                    max_set = items.floor_id
                    item_set = items
            for it in self.floors_fl_al:
                if it.floor_id == max_set:
                    self.floors_fl_al.remove(it)
            self.new_pr.append(item_set)

    def logic(self):
        """
        Logic for Improved Case
        Sets the list so that people only going up can get on if the elevator is
        going up
        Same proceeds for going down
        """
        self.up_list = []
        self.down_list = []
        for person in self.try_list:
            if person.direction_togo == "UP" and ELE.direction == "UP":
                self.up_list.append(person)
            elif person.direction_togo == "DOWN" and ELE.direction == "DOWN":
                self.down_list.append(person)
        if ELE.direction == "UP":
            self.list_set = self.up_list
            if len(self.down_list) > len(self.up_list):
                if ELE.cur_amm_in_ele != 0:
                    ELE.direction == "DOWN"
        elif ELE.direction == "DOWN":
            self.list_set = self.down_list
            if len(self.up_list) > len(self.down_list):
                if ELE.cur_amm_in_ele != 0:
                    ELE.direction == "UP"

    def limits(self):
        """
        For the people in the elevator, the limtis of the destination floors is
        found.
        If the elevator is empty, the limits will change to the people in the
        waiting list
        If the people count drops below a threshold, the target floor function
        will be called
        """
        ##
        lower_lim = self.floors
        upper_lim = 0
        ##
        for person in ELE.lift_list:
            if person.going_floor < lower_lim:
                lower_lim = person.going_floor
            ###########
            if person.going_floor > upper_lim:
                upper_lim = person.going_floor
        ##
        if ELE.cur_amm_in_ele != 0:
            for person in self.list_set:
                if person.on_floor < lower_lim:
                    lower_lim = person.on_floor
                ###########
                if person.on_floor > upper_lim:
                    upper_lim = person.on_floor
        ##
        if ELE.cur_amm_in_ele == 0:
            for person in self.try_list:
                if person.on_floor < lower_lim:
                    lower_lim = person.on_floor
                ###########
                if person.on_floor > upper_lim:
                    upper_lim = person.on_floor
        ##
        if len(ELE.complete) > int((self.people_c/2)):
            target_floor = self.new_pr[0]
            if target_floor.people_floor_count != 0:
                self.target = target_floor.floor_id
                if ELE.cur_amm_in_ele != ELE.max_in:
                    Building.target_floor(self, self.target, target_floor)
        ##
        self.lim_lower = lower_lim
        self.lim_upper = upper_lim

    def target_floor(self, target_fl, target_floor):
        """
        Target floor with the most people is identified, and the elevator will
        move and loop to the desired floor
        Once the destination is reached, the program will continue to the next
        target floor.
        """
        if target_floor.floor_id > ELE.current_floor:
            if ELE.direction == "UP":
                while ELE.current_floor != target_fl:
                    if target_fl > ELE.current_floor:
                        t_lim_upper = target_fl
                        t_lim_lower = 0
                    if target_fl < ELE.current_floor:
                        t_lim_upper = self.floors
                        t_lim_lower = target_fl
                    if target_floor.people_floor_count < ELE.max_in:
                        Building.get_on(self, self.list_set)
                        ELE.move(t_lim_upper, t_lim_lower)
                        ELE.cost()
                        Building.get_off(self)
                    else:
                        ELE.move(t_lim_upper, t_lim_lower)
                        ELE.cost()

        elif target_floor.floor_id < ELE.current_floor:
            if ELE.direction == "DOWN":
                while ELE.current_floor != target_fl:
                    if target_fl > ELE.current_floor:
                        t_lim_upper = target_fl
                        t_lim_lower = 0
                    if target_fl < ELE.current_floor:
                        t_lim_upper = self.floors
                        t_lim_lower = target_fl
                    Building.get_on(self, self.list_set)
                    ELE.move(t_lim_upper, t_lim_lower)
                    Building.get_off(self)
                    time.sleep(0.1)

    def run(self):
        """
        Function for the imporoved case to run, and call the algorithums needed
        Calls frame update data and elevator functions
        Will use the full building fucntions for greater efficiency
        """

        while len(ELE.complete) != self.people_c:
            time.sleep(0.1)
            for item in self.try_list:
                item.waiting_time += 1
            ###
            if len(ELE.complete) != self.people_c:
                Building.get_off(self)
            ##
            ELE.move(self.lim_upper, self.lim_lower)
            Building.logic(self)
            Building.limits(self)
            Building.get_on(self, self.list_set)
            #####
            Building.sort_and_set(self)
            ELE.cost()
            frame.label_average_count(ELE.average_cost/ELE.total_floors_moved)
            frame.lable_waiting_count(ELE.average_wait/self.people_c)
            frame.label_in_ele(ELE.cur_amm_in_ele)
            frame.people_dropped(len(ELE.complete))
            frame.current_floor(ELE.current_floor)
            frame.update()
        ELE.done()

    def logic_none(self):
        """
        The logic for the base case is only allowing people who need to go up
        while the elevator direction is also up
        Same proceeds for down
        """
        self.up_list = []
        self.down_list = []
        self.end_list = []

        for person in self.try_list:
            if ELE.current_floor == self.floors:
                self.end_list.append(person)
            if ELE.current_floor == 0:
                self.end_list.append(person)

            if person.direction_togo == "UP" and ELE.direction == "UP":
                self.up_list.append(person)

            elif person.direction_togo == "DOWN" and ELE.direction == "DOWN":
                self.down_list.append(person)

        if ELE.direction == "UP":
            self.list_set = self.up_list
        elif ELE.direction == "DOWN":
            self.list_set = self.down_list

        if ELE.current_floor == self.floors:
            self.list_set = self.end_list
        elif ELE.current_floor == 0:
            self.list_set = self.end_list
        Building.get_on(self, self.list_set)

    def run_none(self):
        """
        Base case run function, call the elevator functions and frame data
        Can only change direction if max/min limits are reached
        """
        self.lim_lower = 0
        self.lim_upper = self.floors
        while len(ELE.complete) != self.people_c:
            time.sleep(0.1)
            for item in self.try_list:
                item.waiting_time += 1
            ###
            if len(ELE.complete) != self.people_c:
                Building.get_off(self)
            Building.logic_none(self)
            ###
            ELE.move(self.lim_upper, self.lim_lower)
            ELE.cost()
            frame.label_average_count(ELE.average_cost/ELE.total_floors_moved)
            frame.lable_waiting_count(ELE.average_wait/self.people_c)
            frame.label_in_ele(ELE.cur_amm_in_ele)
            frame.people_dropped(len(ELE.complete))
            frame.current_floor(ELE.current_floor)
            frame.update()
        ELE.done()

    def get_on(self, list_set):
        """
        Veiws the specified list, and runs through to see which customer can
        enter the lift_list
        Checks if the elevator is full, othrerwise will call the full frame
        and move functions
        If not, the person is removed from the waiting list, and added to the
        lift list
        """
        for person in list_set:
            if ELE.current_floor == person.on_floor:
                if ELE.cur_amm_in_ele == ELE.max_in:
                    frame.full()
                    Building.get_off(self)
                elif ELE.cur_amm_in_ele == ELE.max_in and len(ELE.lift_list) == ELE.max_in:
                    frame.full()
                    ELE.move(self.lim_upper, self.lim_lower)
                elif ELE.cur_amm_in_ele != ELE.max_in:
                    ELE.add_to_ele(person)
                    frame.change_add_colour()
                    if self.try_list is not None:
                        self.try_list.remove(person) #####
                    for id_item in self.priority_lr:
                        if id_item.floor_id == ELE.current_floor:
                            id_item.people_floor_count -= 1
                    ELE.average_wait += person.waiting_time
                    frame.re_draw(person, ELE.current_floor)

    def get_off(self):
        """
        Removes person from the lift list
        """
        for count_p in range(len(ELE.lift_list)):
            for rem in ELE.lift_list:
                if ELE.current_floor == rem.going_floor:
                    ELE.leave_ele(rem)
                    frame.change_rem_colour()
                    self.list.remove(rem)
                    frame.show_done(rem, ELE.current_floor)


class Elevator_ui(Frame):
    def __init__(self, master, data_for_ui):
        """
        Initalise the gui for the elevator, this will generate the variables
        needed.
        Elevator, floors, lables, and data frames are all generated
        """
        ###
        self.people_tk_list = data_for_ui.cust_list
        self.floors_tk_list = data_for_ui.flr_list
        self.floors_tk = data_for_ui.floor_count_int
        self.people_tk = data_for_ui.people_count_int
        ###
        self.del_list = []
        ###
        for item in self.people_tk_list:
            self.del_list.append(item)
        ###
        self.master = master
        self.canvas = Canvas(self.master, width=1000, height=1000)
        ###
        self.canvas.configure(background='Light blue')
        ###
        self.label_floors = Label(self.master, text="Floors Moved: " + str(0))
        self.canvas.create_window(800, 50, window=self.label_floors)
        self.label_ele = Label(self.master, text="In Elevator: " + str(0))
        self.canvas.create_window(800, 125, window=self.label_ele)
        self.label_av = Label(self.master, text="Average cost in elevator: " + str(0))
        self.canvas.create_window(800, 75, window=self.label_av)
        self.label_wait = Label(self.master, text="Average wait for elevator: " + str(0))
        self.canvas.create_window(800, 100, window=self.label_wait)
        self.label_drop = Label(self.master, text="People dropped off: " + str(0))
        self.canvas.create_window(800, 150, window=self.label_drop)
        self.elevator_curr_floor = Label(self.master, text="Current elevator floor: " + str(0))
        self.canvas.create_window(800, 175, window=self.elevator_curr_floor)
        ###
        Elevator_ui.generate_lift(self)
        Elevator_ui.make_floors_tk(self)
        Elevator_ui.make_people_tk(self)
        ###
        self.canvas.update()
        self.canvas.pack()

    def update(self):
        """
        Updates the canves
        """
        self.canvas.update()

    def generate_lift(self):
        """
        Creates the lift sprite
        """
        x_val = 120
        y_val = 942.5
        self.lift_sprite = self.canvas.create_rectangle(10, 10, 25, 25, fill="Black")
        self.canvas.tag_raise(self.lift_sprite)
        self.canvas.move(self.lift_sprite, x_val, y_val)

        self.label_people = Label(self.master, text="People: " + " " + str(self.people_tk))
        self.canvas.create_window(900, 25, window=self.label_people)

    def make_floors_tk(self):
        """
        Genrates the floors, large floor numbers are not complied outside the
        window range
        """
        x_val = 10
        y_val = 920

        self.tk_florr = self.canvas.create_rectangle(500, 10, 100, 10, fill="Black")
        self.canvas.move(self.tk_florr, x_val, y_val+20)
        ###
        last = y_val - (self.floors_tk*20)
        self.tk_florr = self.canvas.create_rectangle(500, 10, 100, 10, fill="Black")
        self.canvas.move(self.tk_florr, x_val, last)
        ###
        for flor in range(self.floors_tk+1):
            self.tk_florr = self.canvas.create_rectangle(500, 10, 100, 10, fill="Black")
            self.canvas.move(self.tk_florr, x_val, y_val)
            y_val -= 20
            if y_val < 0:
                break

    def make_people_tk(self):
        """
        Generates the people on their correct floors
        """
        y_val = 922.5
        for floor_range in range(0, self.floors_tk+1):
            x_val = 80
            for person_object_floor in self.floors_tk_list:
                if floor_range == person_object_floor.floor_id:
                    self.lable_f = Label(self.master, text = floor_range)
                    self.canvas.create_window(450, y_val+17.5, window = self.lable_f)
                    drop_person_set = person_object_floor.people_floor_count
                    for count in range(0, drop_person_set):
                        self.tk_neperson = self.canvas.create_rectangle(10, 10, 25, 25, fill = person_object_floor.colour)
                        self.canvas.move(self.tk_neperson, x_val, y_val)
                        self.canvas.update()
                        x_val -= 10
            y_val -= 20
            if y_val < 0:
                break
    def current_floor(self, ELE_floor_at):
        """
        Changes current floor frame label
        """
        self.elevator_curr_floor.configure(text="Current elevator floor: " + str(ELE_floor_at))

    def label_total_count(self, counting):
        """
        Changes total floors moved  frame label
        """
        self.label_floors.configure(text="Floors Moved: " + str(counting))

    def label_in_ele(self, amount_in):
        """
        Changes current ammount in elevator frame label
        """
        self.label_ele.configure(text="In Elevator: " + str(amount_in))

    def label_average_count(self, av_count):
        """
        Changes cost in elevator frame label
        """
        self.label_av.configure(text="Average cost in elevator: " + str(av_count))

    def lable_waiting_count(self, wait_counting):
        """
        Changes average wait frame label
        """
        self.label_wait.configure(text="Average wait for elevator: " + str(wait_counting))

    def people_dropped(self, dropped_amm):
        """
        Changes people dropped off frame label
        """
        self.label_drop.configure(text="People dropped off: " + str(dropped_amm))

    def full(self):
        """
        If elevator is full, the sprite will change yellow to indicate in gui
        """
        self.canvas.itemconfig(self.lift_sprite, fill='Yellow')
        self.canvas.update()

    def change_add_colour(self):
        """
        If person is added, the elevator will flash green
        """
        self.canvas.itemconfig(self.lift_sprite, fill='Green')
        self.canvas.update()
        time.sleep(.05)
        self.canvas.itemconfig(self.lift_sprite, fill='Black')
        self.canvas.update()

    def change_rem_colour(self):
        """
        If person is dropped off, the elevator will flash red
        """
        self.canvas.itemconfig(self.lift_sprite, fill='Red')
        self.canvas.update()
        time.sleep(.05)
        self.canvas.itemconfig(self.lift_sprite, fill='Black')
        self.canvas.update()

    def moveup(self):
        """
        Moves elevator sprite up
        """
        self.canvas.move(self.lift_sprite, 0, -20)
        self.canvas.update()

    def movedown(self):
        """
        Moves elevator sprite down
        """
        self.canvas.move(self.lift_sprite, 0, 20)
        self.canvas.update()

    def show_done(self, rem_going_floor, ele_curr_fl):
        """
        Generates the people when they are dropped off on the correct floor
        """
        x_val = 300
        y_val = 922.5
        y_val -= 20*ele_curr_fl
        for person in self.people_tk_list:
            if rem_going_floor.going_floor == person.going_floor and rem_going_floor.going_floor == ele_curr_fl:
                x_val += 10
        colour = rem_going_floor.fill

        self.tk_done = self.canvas.create_rectangle(10, 10, 25, 25, fill=colour)
        self.canvas.move(self.tk_done, x_val, y_val)
        self.canvas.update()


    def re_draw(self, person_at_floor, at_floor_off):
        """
        Removes the people form the waiting list
        """
        x_val = 90
        y_val = 922.5
        y_val -= 20*at_floor_off

        for person in self.del_list:
            if person_at_floor.on_floor == person.on_floor and person_at_floor.on_floor == at_floor_off:
                x_val -= 10


        self.del_list.remove(person_at_floor)
        self.tk_newperson = self.canvas.create_rectangle(10, 10, 25, 25, fill="Light blue", outline="Light blue")
        self.canvas.move(self.tk_newperson, x_val, y_val)
        self.canvas.update()

class Make_floors(object):
    def __init__(self, i, cust_list, floor_count):
        """
        Initalise the floors, its ID and people on that floor
        """
        self.floor_id = i
        self.cust = cust_list
        self.people_floor_count = 0
        for person in self.cust:
            if person.on_floor == self.floor_id:
                self.people_floor_count += 1
                self.colour = person.fill

class variables():
    def __init__(self, people_count_int=0, floor_count_int=0):
        """
        Initalise the gui input, user can input valid data to be run and
        simulated
        """
        self.cust_list = []
        self.flr_list = []
        self.people_count_int = 0
        self.floor_count_int = 0
        self.elevator_amm_cap = 0
        self.algorithum = 0
        ###///###
        self.master = Tk()
        self.master.title("Set variables GUI")
        self.canvas = Canvas(self.master, width=500, height=500)
        ##
        variables.people_set(self)
        variables.floors_set(self)
        variables.elevator_capactity(self)
        variables.distribution_set(self)
        ##
        self.button_create = Button(self.master, text="Set variables", command=self.add)
        self.canvas.create_window(250, 180, window=self.button_create)
        ##
        self.button_base_create = Button(self.master, text="Set variables with Base Case", command=self.add_base)
        self.canvas.create_window(250, 210, window=self.button_base_create)
        ##
        self.lable_error = Label(self.master, text="Invalid entry")
        self.lable_error.config(fg="Red")
        ###////####
        self.canvas.pack()
        self.master.mainloop()

    def elevator_capactity(self):
        """
        Input elevator capactity
        """
        self.lable_e = Label(self.master, text="Enter elevator capactity")
        self.canvas.create_window(400, 100, window=self.lable_e)
        ####
        self.entry_amm = Entry(self.master)
        self.canvas.create_window(400, 140, window=self.entry_amm)
        ####
        self.canvas.update()

    def people_set(self):
        """
        Input ammount of people
        """
        self.lable_p = Label(self.master, text="Enter amount of People")
        self.canvas.create_window(100, 100, window=self.lable_p)
        ######
        self.entry_person = Entry(self.master)
        self.canvas.create_window(100, 140, window=self.entry_person)
        ####
        self.canvas.update()

    def floors_set(self):
        """
        Input the ammount of floors
        """
        self.lable_f = Label(self.master, text="Enter amount of Floors")
        self.canvas.create_window(250, 100, window=self.lable_f)
        ######
        self.entry_floors = Entry(self.master)
        self.canvas.create_window(250, 140, window=self.entry_floors)
        ####
        self.canvas.update()

    def distribution_set(self):
        """
        Data distribution select
        """
        self.lable_d = Label(self.master, text="Distribution")
        self.canvas.create_window(250, 250, window=self.lable_d)
        ######
        self.option_var = StringVar(self.master)
        self.option_var.set("Random") # initial variable value
        self.option = OptionMenu(self.master, self.option_var, "Random", "Normal", "Exponetial(UP)", "Exponetial(DOWN)")
        self.canvas.create_window(250, 275, window=self.option)
        ####
        self.canvas.update()


    def add(self):
        """
        Improved case variables
        """
        try:
            self.people_count_int = int(self.entry_person.get())
            self.floor_count_int = int(self.entry_floors.get())
            self.elevator_amm_cap = int(self.entry_amm.get())
            self.distribution = str(self.option_var.get())
            #
            for number_ID in range(1, self.people_count_int+1):
                self.cust_list.append(People(number_ID, self.floor_count_int, self.distribution))
            #
            for floor_ID in range(0, self.floor_count_int+1):
                self.flr_list.append(Make_floors(floor_ID, self.cust_list, self.floor_count_int))
            ##
            self.algorithum = 0
            self.master.destroy()
        except ValueError:
            self.canvas.create_window(180, 50, window=self.lable_error)
        ##

    def add_base(self):
        """
        Base case variables
        """
        try:
            self.people_count_int = int(self.entry_person.get())
            self.floor_count_int = int(self.entry_floors.get())
            self.elevator_amm_cap = int(self.entry_amm.get())
            self.distribution = str(self.option_var.get())

            for number_ID in range(1, self.people_count_int+1):
                self.cust_list.append(People(number_ID, self.floor_count_int, self.distribution))
            #
            for floor_ID in range(0, self.floor_count_int+1):
                self.flr_list.append(Make_floors(floor_ID, self.cust_list, self.floor_count_int))
            ##
            self.algorithum = 1
            self.master.destroy()
        except ValueError:
            self.canvas.create_window(180, 50, window=self.lable_error)

if __name__ == "__main__":
    """
    Main function runs program
    """
    data_set = variables()
    # people()
    master = Tk()
    master.title("Elevator GUI")
    ###//
    frame = Elevator_ui(master, data_set)
    ###//
    ELE = Elevator(data_set, frame)
    ###//
    building = Building(data_set, ELE, frame)
    ###//
    master.mainloop()
